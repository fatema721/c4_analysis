** I tried to use a few of the programs you provided, but some did not work with the code provided unless I made some edits so I myself calculated some of the statistics.

Cppcheck Analysis Report:
The Cppcheck analysis of the code revealed issues related to incorrect format specifiers in printf statements. The warnings included:
1. Incorrect Format Specifier for signed long long Type:
The printf function uses the %d format specifier, expecting an int argument, but the arguments are of type signed long long, causing warnings like:
- Line 59: printf("%d: unexpected eof in expression\n", line);
- 
Line 66: printf("%d: open paren expected in sizeof\n", line);
2. 
Missing Standard Library Headers:
Cppcheck flagged missing standard library headers, which are not required in C4:
- <stdio.h>
- <stdlib.h>
- <memory.h>
- <unistd.h>
- <fcntl.h>

Lines of Code (LOC) for the Entire Program and Individual Functions:
- The file consists of 541 LOC.
- Cyclomatic Complexity for each
  - next is High
  - expr is Very high
  - stmt is  Medium
  - main is Medium
- 4 functions in total
- 3 functions minus main():
  - Void next(): 94 LOC
  - Void expr(): 149 LOC
  - Void smt(): 49 LOC
- Main(): 198 LOC

Number of Global Variables and Their Usage:
There are 12 global variables, which are heavily used in the compiler:
1. char *p, *lp: p = current position in source code; lp = start of the current line for printing.
2. char *data: Stores global variables and string literals.
3. int *e, *le: e = current position in generated code; le = end of code for printing.
4. int *id: Points to the current identifier in the symbol table.
5. int *sym: Symbol table for storing variables and functions.
6. int tk: Current token.
7. int ival: The value of the current token.
8. int ty: The type of the current expression (INT, CHAR, PTR).
9. int loc: Tracks local variable offsets in functions.
10. int line: The current line number in the source code.
11. int src: Flag for printing the source code and the assembly during execution.
12. int debug: Flag for debugging output for each instruction.

Number of Unique Tokens and Their Frequency:
There are 32 unique tokens, including keywords, operators, identifiers, numbers, and string literals. The frequency of these tokens varies, with keywords and operators being very frequent.

Number of branches, loops, and their nesting levels:
- Branch Count: Numerous
- Loop Count: Several
- Branch Nesting: Moderate
- Loop Nesting: Moderate

Memory Usage Patterns:
Memory usage is divided between heap and stack:
- Heap: Used for persistent data like the symbol table, emitted code, global variables, and source code. Dynamic memory operations are handled in the heap. In summary they are used for Memory pools for symbol table, generated code, data, stack, and source code.
- Stack: Used for
 transient data like function calls, local variables, and intermediate results. Function frames are managed by enter and leave instructions. In summary they are used for Function call frames, local variables, and expression evaluation

Global variables are stored in the heap, while local variables are stored in the stack. Memory is initialized to zero, and manual memory management is used without garbage collection to handle both persistent and transient data effectively.
